# .github/workflows/backend-ci.yml
# Workflow de Integração Contínua para o Backend (v2 - Corrigido)

name: Backend CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout do Código
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Configurar o Python
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # 3. Instalar o Poetry
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: '1.7.1'
          virtualenvs-create: true
          virtualenvs-in-project: true
          # Especifica o diretório para Poetry encontrar pyproject.toml
          directory: ./backend

      # 4. Configurar Cache para Dependências
      # O path é relativo à raiz do repositório.
      # A chave do cache agora aponta especificamente para o lockfile do backend.
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: backend/.venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('backend/poetry.lock') }}

      # 5. Instalar Dependências
      # Executa 'poetry install' apenas se o cache não for encontrado.
      # O working-directory é especificado diretamente neste passo.
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        working-directory: ./backend
        run: poetry install --no-interaction --no-ansi

      # 6. Executar Testes com Pytest
      # O working-directory também é especificado aqui.
      - name: Run tests with pytest
        working-directory: ./backend
        run: poetry run pytest
