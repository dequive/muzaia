# .github/workflows/backend-ci.yml
# Workflow de Integração Contínua para o Backend (v3 - Mais Robusto)

name: Backend CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: '1.7.1'
          virtualenvs-create: true
          virtualenvs-in-project: true
          directory: ./backend

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: backend/.venv
          key: venv-${{ runner.os }}-${{ hashFiles('backend/poetry.lock') }}

      # Passo de instalação mais explícito.
      # Garante que TODAS as dependências, incluindo as de 'dev', sejam instaladas.
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        working-directory: ./backend
        run: poetry install --no-interaction

      # Passo de teste revisado
      - name: Run tests with pytest
        working-directory: ./backend
        # Define o PYTHONPATH explicitamente antes de rodar o pytest.
        # Isso garante que 'pytest' encontre o diretório 'app'.
        run: |
          export PYTHONPATH=.
          poetry run pytest
