# .github/workflows/backend-ci.yml
# Workflow de Integração Contínua para o Backend (v5 - Modo de Diagnóstico)

name: Backend CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: '1.7.1'
          virtualenvs-create: true
          virtualenvs-in-project: true
          directory: ./backend

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: backend/.venv
          key: venv-${{ runner.os }}-${{ hashFiles('backend/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        working-directory: ./backend
        run: poetry install --no-interaction

      # --- PASSOS DE DIAGNÓSTICO ---
      - name: 1. Verify file structure
        working-directory: ./backend
        run: |
          echo "--- Current Directory Content ---"
          ls -la
          echo "--- Tests Directory Content ---"
          ls -la tests/
          
      - name: 2. Verify Poetry environment
        working-directory: ./backend
        run: |
          echo "--- Poetry Environment Info ---"
          poetry env info
          echo "--- Installed Packages ---"
          poetry show

      # --- PASSO DE TESTE FINAL ---
      - name: 3. Run tests with pytest (verbose)
        working-directory: ./backend
        # Executa o pytest com máxima verbosidade para logs detalhados.
        run: poetry run python -m pytest -vvv
