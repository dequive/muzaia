
#!/usr/bin/env python3
"""
Script para popular o gloss√°rio com termos jur√≠dicos iniciais
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from sqlalchemy.orm import Session
from app.database.connection import get_db
from app.models.glossario import GlossarioTermo, CategoriaJuridica, NivelTecnico, StatusGlossario
import uuid

# Termos iniciais para o gloss√°rio
TERMOS_INICIAIS = [
    {
        "termo": "Habeas Corpus",
        "definicao": "Instrumento jur√≠dico que visa proteger o direito de liberdade de locomo√ß√£o, impedindo ou cessando pris√£o ilegal ou abusiva.",
        "categoria": CategoriaJuridica.DIREITO_CONSTITUCIONAL,
        "nivel_tecnico": NivelTecnico.INTERMEDIARIO,
        "exemplo": "O advogado impetrou habeas corpus em favor do r√©u preso ilegalmente.",
        "sinonimos": ["rem√©dio constitucional", "garantia de liberdade"],
        "tags": ["liberdade", "pris√£o", "constitucional", "garantia"]
    },
    {
        "termo": "Mandado de Seguran√ßa",
        "definicao": "A√ß√£o constitucional que visa proteger direito l√≠quido e certo n√£o amparado por habeas corpus ou habeas data, quando o respons√°vel pela ilegalidade for autoridade p√∫blica.",
        "categoria": CategoriaJuridica.DIREITO_CONSTITUCIONAL,
        "nivel_tecnico": NivelTecnico.AVANCADO,
        "exemplo": "Foi impetrado mandado de seguran√ßa contra o ato administrativo que negou a licen√ßa.",
        "sinonimos": ["MS", "rem√©dio constitucional"],
        "tags": ["direito l√≠quido", "autoridade p√∫blica", "ato administrativo"]
    },
    {
        "termo": "Peti√ß√£o Inicial",
        "definicao": "Pe√ßa processual que d√° in√≠cio ao processo judicial, contendo os fatos, fundamentos jur√≠dicos e pedido do autor.",
        "categoria": CategoriaJuridica.PROCESSO_CIVIL,
        "nivel_tecnico": NivelTecnico.BASICO,
        "exemplo": "A peti√ß√£o inicial deve conter todos os requisitos previstos no artigo 319 do CPC.",
        "sinonimos": ["inicial", "pe√ßa inicial"],
        "tags": ["processo", "inicial", "peti√ß√£o", "autor"]
    },
    {
        "termo": "Contesta√ß√£o",
        "definicao": "Resposta do r√©u √† peti√ß√£o inicial, apresentando sua defesa e eventuais alega√ß√µes contra o pedido do autor.",
        "categoria": CategoriaJuridica.PROCESSO_CIVIL,
        "nivel_tecnico": NivelTecnico.BASICO,
        "exemplo": "O r√©u apresentou contesta√ß√£o negando os fatos alegados pelo autor.",
        "sinonimos": ["defesa", "resposta do r√©u"],
        "tags": ["defesa", "r√©u", "processo", "resposta"]
    },
    {
        "termo": "Dolo",
        "definicao": "Vontade livre e consciente de praticar um crime, abrangendo tanto a inten√ß√£o direta quanto a eventual.",
        "categoria": CategoriaJuridica.DIREITO_PENAL,
        "nivel_tecnico": NivelTecnico.INTERMEDIARIO,
        "exemplo": "O r√©u agiu com dolo ao planejar e executar o crime premeditadamente.",
        "sinonimos": ["inten√ß√£o criminosa", "m√°-f√©"],
        "tags": ["crime", "inten√ß√£o", "vontade", "consci√™ncia"]
    },
    {
        "termo": "Culpa",
        "definicao": "Conduta em que o agente, embora n√£o querendo o resultado, age com neglig√™ncia, imprud√™ncia ou imper√≠cia.",
        "categoria": CategoriaJuridica.DIREITO_PENAL,
        "nivel_tecnico": NivelTecnico.INTERMEDIARIO,
        "exemplo": "O acidente ocorreu por culpa do motorista que dirigia em velocidade excessiva.",
        "sinonimos": ["neglig√™ncia", "imprud√™ncia"],
        "tags": ["neglig√™ncia", "imprud√™ncia", "imper√≠cia", "responsabilidade"]
    },
    {
        "termo": "Usucapi√£o",
        "definicao": "Modo origin√°rio de aquisi√ß√£o da propriedade pela posse prolongada da coisa, acompanhada de determinados requisitos legais.",
        "categoria": CategoriaJuridica.DIREITO_CIVIL,
        "nivel_tecnico": NivelTecnico.AVANCADO,
        "exemplo": "Ap√≥s 15 anos de posse mansa e pac√≠fica, o ocupante pode requerer a usucapi√£o do im√≥vel.",
        "sinonimos": ["prescri√ß√£o aquisitiva"],
        "tags": ["propriedade", "posse", "aquisi√ß√£o", "tempo"]
    },
    {
        "termo": "Sociedade An√¥nima",
        "definicao": "Tipo societ√°rio em que o capital social √© dividido em a√ß√µes, e a responsabilidade dos s√≥cios √© limitada ao valor das a√ß√µes subscritas.",
        "categoria": CategoriaJuridica.DIREITO_COMERCIAL,
        "nivel_tecnico": NivelTecnico.INTERMEDIARIO,
        "exemplo": "A empresa se constituiu como sociedade an√¥nima para facilitar a capta√ß√£o de investimentos.",
        "sinonimos": ["S.A.", "companhia"],
        "tags": ["sociedade", "a√ß√µes", "capital", "responsabilidade limitada"]
    },
    {
        "termo": "Ato Administrativo",
        "definicao": "Manifesta√ß√£o unilateral de vontade da Administra√ß√£o P√∫blica que, agindo nessa qualidade, tenha por fim imediato adquirir, resguardar, transferir, modificar, extinguir e declarar direitos.",
        "categoria": CategoriaJuridica.DIREITO_ADMINISTRATIVO,
        "nivel_tecnico": NivelTecnico.AVANCADO,
        "exemplo": "A concess√£o da licen√ßa ambiental √© um ato administrativo vinculado.",
        "sinonimos": ["ato da administra√ß√£o"],
        "tags": ["administra√ß√£o p√∫blica", "vontade", "direitos", "vinculado"]
    },
    {
        "termo": "Sal√°rio M√≠nimo",
        "definicao": "Menor remunera√ß√£o que um trabalhador pode receber por seu trabalho, fixada por lei e revista periodicamente.",
        "categoria": CategoriaJuridica.DIREITO_TRABALHO,
        "nivel_tecnico": NivelTecnico.BASICO,
        "exemplo": "O valor do sal√°rio m√≠nimo em Mo√ßambique √© estabelecido por decreto governamental.",
        "sinonimos": ["remunera√ß√£o m√≠nima"],
        "tags": ["sal√°rio", "trabalhador", "remunera√ß√£o", "lei"]
    }
]

def seed_glossario():
    """Popular o gloss√°rio com termos iniciais"""
    
    # Obter sess√£o do banco
    db = next(get_db())
    
    print("üå± Iniciando popula√ß√£o do gloss√°rio...")
    
    try:
        for termo_data in TERMOS_INICIAIS:
            # Verificar se o termo j√° existe
            existing = db.query(GlossarioTermo).filter(
                GlossarioTermo.termo == termo_data["termo"]
            ).first()
            
            if existing:
                print(f"   ‚ö†Ô∏è  Termo '{termo_data['termo']}' j√° existe, pulando...")
                continue
            
            # Criar novo termo
            novo_termo = GlossarioTermo(
                id=uuid.uuid4(),
                termo=termo_data["termo"],
                definicao=termo_data["definicao"],
                categoria=termo_data["categoria"],
                nivel_tecnico=termo_data["nivel_tecnico"],
                exemplo=termo_data.get("exemplo"),
                sinonimos=termo_data.get("sinonimos", []),
                tags=termo_data.get("tags", []),
                jurisdicao="mozambique",
                idioma="pt",
                versao="1.0",
                status=StatusGlossario.VALIDADO,
                revisado_por="sistema",
                is_active=True
            )
            
            db.add(novo_termo)
            print(f"   ‚úÖ Adicionado: {termo_data['termo']}")
        
        db.commit()
        print(f"\nüéâ Gloss√°rio populado com sucesso!")
        print(f"   üìä Total de termos criados: {len(TERMOS_INICIAIS)}")
        
    except Exception as e:
        db.rollback()
        print(f"‚ùå Erro ao popular gloss√°rio: {e}")
        raise
    
    finally:
        db.close()

if __name__ == "__main__":
    seed_glossario()
