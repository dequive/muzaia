version: '3.8'

services:
  backend:
    container_name: muzaia-backend-dev
    build:
      context: .
      dockerfile: Dockerfile
      target: final  # Alterado para usar o estágio final do Dockerfile
    ports:
      - "8001:8000"
    volumes:
      - ./app:/app/app  # Ajustado para evitar sobrescrever o virtualenv
      - ./alembic:/app/alembic
      - ./main.py:/app/main.py
      - ./alembic.ini:/app/alembic.ini
    env_file:
      - .env
    # Removido o comando pois já está definido no Dockerfile
    # command: poetry run uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    container_name: muzaia-postgres-dev
    image: postgres:15-alpine
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    container_name: muzaia-prometheus-dev
    image: prom/prometheus:v2.47.0
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      - backend

  grafana:
    container_name: muzaia-grafana-dev
    image: grafana/grafana:10.1.1
    ports:
      - "3001:3000"
    volumes:
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboard-providers
      - ./grafana/dashboards:/etc/grafana/dashboards
      - grafana_data:/var/lib/grafana
    env_file:
      - .env
    depends_on:
      - prometheus

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
