const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Configurações
const PACKAGE_JSON_PATH = path.join(__dirname, '..', 'package.json');
const BACKUP_PATH = PACKAGE_JSON_PATH + '.backup';

// Conteúdo correto do package.json
const CORRECT_PACKAGE_JSON = {
  "name": "mozaia-frontend",
  "version": "2.0.0",
  "description": "Frontend do Mozaia LLM Orchestrator",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "lint:fix": "next lint --fix",
    "type-check": "tsc --noEmit",
    "format": "prettier --write .",
    "format:check": "prettier --check .",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "analyze": "cross-env ANALYZE=true next build",
    "storybook": "storybook dev -p 6006",
    "build-storybook": "storybook build"
  },
  "dependencies": {
    "next": "14.0.4",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "@supabase/supabase-js": "^2.38.5",
    "@supabase/auth-helpers-nextjs": "^0.8.7",
    "@supabase/auth-helpers-react": "^0.4.2",
    "@tanstack/react-query": "^5.17.0",
    "@tanstack/react-query-devtools": "^5.17.0",
    "zustand": "^4.4.7",
    "axios": "^1.6.2",
    "react-hook-form": "^7.48.2",
    "@hookform/resolvers": "^3.3.2",
    "zod": "^3.22.4",
    "lucide-react": "^0.295.0",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.0.0",
    "tailwind-merge": "^2.2.0",
    "@radix-ui/react-dialog": "^1.0.5",
    "@radix-ui/react-dropdown-menu": "^2.0.6",
    "@radix-ui/react-toast": "^1.1.5",
    "@radix-ui/react-tooltip": "^1.0.7",
    "@radix-ui/react-tabs": "^1.0.4",
    "@radix-ui/react-progress": "^1.0.3",
    "@radix-ui/react-avatar": "^1.0.4",
    "@radix-ui/react-select": "^2.0.0",
    "@radix-ui/react-slider": "^1.1.2",
    "@radix-ui/react-switch": "^1.0.3",
    "@radix-ui/react-checkbox": "^1.0.4",
    "@radix-ui/react-label": "^2.0.2",
    "next-themes": "^0.2.1",
    "framer-motion": "^10.16.16",
    "react-markdown": "^9.0.1",
    "rehype-highlight": "^7.0.0",
    "rehype-raw": "^7.0.0",
    "remark-gfm": "^4.0.0",
    "react-syntax-highlighter": "^15.5.0",
    "recharts": "^2.8.0",
    "date-fns": "^2.30.0",
    "react-hot-toast": "^2.4.1",
    "react-loading-skeleton": "^3.3.1",
    "react-intersection-observer": "^9.5.3",
    "react-use": "^17.4.2",
    "lodash": "^4.17.21",
    "copy-to-clipboard": "^3.3.3"
  },
  "devDependencies": {
    "typescript": "^5.3.3",
    "@types/node": "^20.10.5",
    "@types/react": "^18.2.45",
    "@types/react-dom": "^18.2.18",
    "@types/lodash": "^4.14.202",
    "@types/react-syntax-highlighter": "^15.5.11",
    "eslint": "^8.56.0",
    "eslint-config-next": "14.0.4",
    "@typescript-eslint/eslint-plugin": "^6.15.0",
    "@typescript-eslint/parser": "^6.15.0",
    "prettier": "^3.1.1",
    "prettier-plugin-tailwindcss": "^0.5.9",
    "tailwindcss": "^3.4.0",
    "autoprefixer": "^10.4.16",
    "postcss": "^8.4.32",
    "cross-env": "^7.0.3",
    "jest": "^29.7.0",
    "jest-environment-jsdom": "^29.7.0",
    "@testing-library/react": "^14.1.2",
    "@testing-library/jest-dom": "^6.1.6",
    "@storybook/addon-essentials": "^7.6.6",
    "@storybook/addon-interactions": "^7.6.6",
    "@storybook/addon-links": "^7.6.6",
    "@storybook/blocks": "^7.6.6",
    "@storybook/nextjs": "^7.6.6",
    "@storybook/react": "^7.6.6",
    "@storybook/testing-library": "^0.2.2"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=8.0.0"
  }
};

function log(message, type = 'INFO') {
  const timestamp = new Date().toISOString();
  console.log(`[${timestamp}] [${type}] ${message}`);
}

function createBackup() {
  try {
    if (fs.existsSync(PACKAGE_JSON_PATH)) {
      fs.copyFileSync(PACKAGE_JSON_PATH, BACKUP_PATH);
      log('Backup criado com sucesso');
      return true;
    }
  } catch (error) {
    log(`Erro ao criar backup: ${error.message}`, 'ERROR');
    return false;
  }
}

function restoreBackup() {
  try {
    if (fs.existsSync(BACKUP_PATH)) {
      fs.copyFileSync(BACKUP_PATH, PACKAGE_JSON_PATH);
      log('Backup restaurado com sucesso');
      return true;
    }
  } catch (error) {
    log(`Erro ao restaurar backup: ${error.message}`, 'ERROR');
    return false;
  }
}

function detectConflicts(content) {
  const conflictMarkers = ['<<<<<<<', '=======', '>>>>>>>'];
  return conflictMarkers.some(marker => content.includes(marker));
}

function removeConflicts(content) {
  // Remove marcadores de conflito Git
  let cleaned = content;
  
  // Remove seções de conflito
  const conflictRegex = /<<<<<<< .*?\n([\s\S]*?)=======([\s\S]*?)>>>>>>> .*?\n/g;
  cleaned = cleaned.replace(conflictRegex, '$1');
  
  // Remove marcadores restantes
  cleaned = cleaned.replace(/<<<<<<< .*?\n/g, '');
  cleaned = cleaned.replace(/=======/g, '');
  cleaned = cleaned.replace(/>>>>>>> .*?\n/g, '');
  
  return cleaned;
}

function fixPackageJson() {
  log('Iniciando correção do package.json...');
  
  // Criar backup
  if (!createBackup()) {
    log('Falha ao criar backup, abortando...', 'ERROR');
    return false;
  }
  
  try {
    // Sobrescrever com conteúdo correto
    fs.writeFileSync(PACKAGE_JSON_PATH, JSON.stringify(CORRECT_PACKAGE_JSON, null, 2), 'utf8');
    log('Arquivo package.json corrigido com sucesso');
    
    // Validar JSON
    try {
      JSON.parse(fs.readFileSync(PACKAGE_JSON_PATH, 'utf8'));
      log('JSON válido confirmado');
    } catch (jsonError) {
      log(`Erro de validação JSON: ${jsonError.message}`, 'ERROR');
      restoreBackup();
      return false;
    }
    
    return true;
  } catch (error) {
    log(`Erro ao corrigir arquivo: ${error.message}`, 'ERROR');
    restoreBackup();
    return false;
  }
}

function installDependencies() {
  log('Instalando dependências...');
  try {
    execSync('npm install', { 
      cwd: path.dirname(PACKAGE_JSON_PATH), 
      stdio: 'inherit' 
    });
    log('Dependências instaladas com sucesso');
    return true;
  } catch (error) {
    log(`Erro ao instalar dependências: ${error.message}`, 'ERROR');
    return false;
  }
}

function cleanup() {
  try {
    if (fs.existsSync(BACKUP_PATH)) {
      fs.unlinkSync(BACKUP_PATH);
      log('Backup temporário removido');
    }
  } catch (error) {
    log(`Aviso: Não foi possível remover backup: ${error.message}`, 'WARN');
  }
}

// Função principal
function main() {
  log('='.repeat(50));
  log('INICIANDO CORREÇÃO DO PACKAGE.JSON');
  log('='.repeat(50));
  
  // Verificar se o arquivo existe
  if (!fs.existsSync(PACKAGE_JSON_PATH)) {
    log('Arquivo package.json não encontrado', 'ERROR');
    process.exit(1);
  }
  
  // Corrigir arquivo
  if (!fixPackageJson()) {
    log('Falha na correção do package.json', 'ERROR');
    process.exit(1);
  }
  
  // Instalar dependências
  if (!installDependencies()) {
    log('Falha na instalação das dependências', 'ERROR');
    process.exit(1);
  }
  
  // Cleanup
  cleanup();
  
  log('='.repeat(50));
  log('CORREÇÃO CONCLUÍDA COM SUCESSO!');
  log('='.repeat(50));
  log('Agora você pode executar: npm run dev');
}

// Executar se for chamado diretamente
if (require.main === module) {
  main();
}

module.exports = { fixPackageJson, installDependencies };
